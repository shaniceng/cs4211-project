// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// If there is penalty
var penaltyGoal = false;
var goal = false;

// If middle is open for the keeper
var midOpen = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Number of backpass for defender
var num_def_backpass = 0;

// Number of backpass for Mid
var num_mid_backpass = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header, Penalty,backward, Keeper Volley
enum {SP, LP, LS, FI, VO, HD, PN, BW, KVO};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1, -1, -1, -1, -1, -1, 0, 0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1];
var atkDefPos = [-1, -1, -1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 1, -1, -1, -1, -1, -1, -1];
var atkMidPos = [-1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1];
var atkForPos = [-1, -1, -1, -1, -1, -1, 0, 1, 0, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1];
var defKepPos = [-1, -1, -1, -1, -1, -1, 0, 0, 0, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1];
AtkKep = [pos[C] == 1]Kep_1(68, 68, 47, C);
AtkDef = [pos[R] == 1]Def(78, 69, 27, R) [] [pos[CR] == 1]Def(79, 82, 27, CR) [] [pos[CL] == 1]Def(75, 78, 27, CL) [] [pos[L] == 1]Def(79, 67, 27, L);
AtkMid = [pos[CR] == 1]Mid(82, 80, 61, 69, CR) [] [pos[CL] == 1]Mid(81, 79, 79, 69, CL);
AtkFor = [pos[RL] == 1]For(81, 87, 85, 84, 49, 63, 90, 87, RL) [] [pos[C] == 1]For(59, 68, 59, 56, 49, 78, 90, 67, C) [] [pos[LR] == 1]For(86, 90, 81, 68, 49, 75, 90, 74, LR) [] [pos[CR] == 1]For(94, 86, 85, 85, 49, 78, 90, 88, CR);
DefKep = [pos[C] == 1]Kep_2(74,C);

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

Kep_1(i, j, k, p) = 
    [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]kepVolley -> pcase { 
        k: pass{midOpen = true;} -> UpdatePos(p, KVO); AtkMid //formula for keeper to pass to mid
        100-k: midNotOpen{midOpen = false;} -> AtkDefKeeperPass(i, j, p)
    };

AtkDefKeeperPass(i, j, p) = 
    [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase { 
        i: pass -> UpdatePos(p, SP); AtkDef 
        100-i: intercepted{danger = 5;} -> Skip 
    } [] 
    [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
        j: pass -> UpdatePos(p, LP); AtkDef
        100-j: intercepted{danger = 5;} -> Skip
    };

Def(i, j, k, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	i: pass -> 
		if(num_def_backpass < 2) {
			pcase { 
	            i: passForward -> UpdatePos(p,SP); AtkMid
	            i: passBackward{num_def_backpass++;} -> UpdatePos(p,BW); AtkKep
	        }
        } else {
        	pcase{
            	i: passForward -> UpdatePos(p,SP); AtkMid
           }
        }
	k: tackled{danger = 4;} -> Skip
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	j: pass -> UpdatePos(p, LP); AtkMid
	k: tackled{danger = 4;} -> Skip
};

Mid(i, j, k, l, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	i: pass -> 
		if(num_mid_backpass < 2) {
			pcase { 
	            i: passForward -> UpdatePos(p, SP); AtkFor
	            i: passBackward{num_mid_backpass++;} -> UpdatePos(p,SP); AtkDef
	        }
        } else {
        	pcase{
            	i: passForward -> UpdatePos(p, SP); AtkFor
           }
        }
	l: tackled{danger = 3;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	j: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	l: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	k: shoot -> UpdatePos(p, LS); DefKep
	l: tackled{danger = 3;} -> Skip
};

For(i, j, k, l, m, n, o, h, p) = [defKepPos[C] == 1]finish -> pcase {
	// pass to atk_mid
	i: shoot -> UpdatePos(p, FI); DefKep
 	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
 	}
} [] [defKepPos[C] == 1]longShot -> pcase {
	// pass to atk_mid
	j: shoot -> UpdatePos(p, LS); DefKep
	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
	 }
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	// pass to atk_mid
	k: shoot -> UpdatePos(p, VO); DefKep
	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
	 }
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	// pass to atk_mid
	h: goodHeader -> pcase {
		l: shoot -> UpdatePos(p, HD); DefKep
		m: tackled -> pcase {
	 		n: penalty -> pcase {
	 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
	 		}
	 		100-n: {
	 			danger = 2;
	 		} -> Skip
	 	}
	 }
	100-h: badHeader -> Skip
};

Kep_2(i, p) = attemptSave -> pcase {
	i: save{danger = 1;} -> Skip
	100-i: concede -> Skip
};

UpdatePos(p, e) = case {
	p == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			e == KVO: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 0; pos[CR] = 1; pos[RL] = 0; pos[R] = 0; } -> Skip //Keeper volley to midfielders
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	p == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#define PenaltyGoal penaltyGoal == true;

#assert AtkKep |= F G (Goal3 || PenaltyGoal) with prob;