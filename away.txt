#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// If there is penalty
var penaltyGoal = false;

// If middle is open for the keeper
var midOpen = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header, Penalty,backward, Keeper Volley
enum {SP, LP, LS, FI, VO, HD, PN, BW, KVO};

// Number of backpass for defender
var num_def_backpass = 0;

// Number of backpass for Mid
var num_mid_backpass = 0;

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)]; // Goalkeeper (away team) (1)
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)]; // Center back (away team) (4)
var atkMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)]; // Midfielders (away team) (3)
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)]; // Strikers (away team) (3)
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)]; // Goalkeeper (home team) (1)

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass, or attacking_volleys that can go to attack midfielders
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player ( Bradley Guzan - GK Kicking )
// Adding on chance to pass to midfield based on positioning ratings for the midfielders + GK Kicking (Idrissa Gueye (67), Ashley Westwood (55), Jordan Veretout (68)). 
// Formula considers a scale factor of 1/4 
AtkKep = [pos[C] == 1]Kep_1(ATKKEP_SHORT_PASS, ATKKEP_LONG_PASS, PROB_PASS_MID, C);

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
AtkDef = [pos[R] == 1]Def(ATKDEF_SHORT_PASS_R, ATKDEF_LONG_PASS_R, ATKDEF_PROB_LOSE_R, R)
         [] [pos[CR] == 1]Def(ATKDEF_SHORT_PASS_CR, ATKDEF_LONG_PASS_CR, ATKDEF_PROB_LOSE_CR, CR)
         [] [pos[CL] == 1]Def(ATKDEF_SHORT_PASS_CL, ATKDEF_LONG_PASS_CL, ATKDEF_PROB_LOSE_CL, CL)
         [] [pos[L] == 1]Def(ATKDEF_SHORT_PASS_L, ATKDEF_LONG_PASS_L, ATKDEF_PROB_LOSE_L, L);
// Leandro Bacuna ( R ), Micah Richards (CR) , Ciaran Clark (CL), Jordan Amavi (L)
// attacking_short_passing, skill_long_passing, Prob to lose ball (maybe nid to comeout with some weights - include skill_ball_control for from attacking)

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
AtkMid = [pos[RL] == 1]Mid(ATKMID_SHORT_PASS_RL, ATKMID_LONG_PASS_RL, ATKMID_POWER_LONG_SHOT_RL, ATKMID_PROB_LOSE_RL, RL)
         [] [pos[C] == 1]Mid(ATKMID_SHORT_PASS_C, ATKMID_LONG_PASS_C, ATKMID_POWER_LONG_SHOT_C, ATKMID_PROB_LOSE_C, C)
         [] [pos[LR] == 1]Mid(ATKMID_SHORT_PASS_LR, ATKMID_LONG_PASS_LR, ATKMID_POWER_LONG_SHOT_LR, ATKMID_PROB_LOSE_LR, LR);
// Jordan Veretout, Ashley Westwood, Idrissa Gueye

// attacking_short_passing, skill_long_passing, power_long_shot, probability of losing the ball,??,??,prob of aggression from max opponent player, header_weighted_prob,pos
AtkFor = [pos[RL] == 1]For(ATKFOR_SHORT_PASS_RL, ATKFOR_LONG_PASS_RL, ATKFOR_VOLLEY_SHOOT_RL, ATKFOR_HEADER_SHOOT_RL, ATKFOR_TACKLE_RL, ATKFOR_PENALTY_RL, ATKFOR_PENALTY_SHOOT_RL, ATKFOR_HEADER_RL, RL)
         [] [pos[C] == 1]For(ATKFOR_SHORT_PASS_C, ATKFOR_LONG_PASS_C, ATKFOR_VOLLEY_SHOOT_C, ATKFOR_HEADER_SHOOT_C, ATKFOR_TACKLE_C, ATKFOR_PENALTY_C, ATKFOR_PENALTY_SHOOT_C, ATKFOR_HEADER_C, C)
         [] [pos[LR] == 1]For(ATKFOR_SHORT_PASS_LR, ATKFOR_LONG_PASS_LR, ATKFOR_VOLLEY_SHOOT_LR, ATKFOR_HEADER_SHOOT_LR, ATKFOR_TACKLE_LR, ATKFOR_PENALTY_LR, ATKFOR_PENALTY_SHOOT_LR, ATKFOR_HEADER_LR, LR);
// Jordan Ayew, Gabriel Agbonlahor, Scott Sinclair (highest penalty goal chance of 83)
// attacking_finishing, power_long_shots, attacking_volleys, attacking_heading_accuracy, probability of losing the ball, probability of aggression ( from opponent ) - when get tackled then check aggression, if aggression is high then is a foul
// probability of agression - find the max between the 2 players that is nearer to the current atk forward area.
// Assumption is that other opponent defending players are too far away from the current atk forward player, hence only consider nearest 2 opponent players that will have higher chance of getting tackled.
// 77 is from Tommy Elphick and 74 is from Steve Cook

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter ( Artur Boruc - GK Handling )
DefKep = [pos[C] == 1]Kep_2(DEFKEP_HANDLING, C); // add a weighted gk results

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

Kep_1(i, j, k, p) = 
    [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]kepVolley -> pcase { 
        k: pass{midOpen = true;} -> UpdatePos(p, KVO); AtkMid //formula for keeper to pass to mid
        100-k: midNotOpen{midOpen = false;} -> AtkDefKeeperPass(i, j, p)
    };

AtkDefKeeperPass(i, j, p) = 
    [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase { 
        i: pass -> UpdatePos(p, SP); AtkDef 
        100-i: intercepted{danger = 5;} -> Skip 
    } [] 
    [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
        j: pass -> UpdatePos(p, LP); AtkDef
        100-j: intercepted{danger = 5;} -> Skip
    };

Def(i, j, k, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	i: pass -> 
		if(num_def_backpass < 2) {
			pcase { 
	            i: passForward -> UpdatePos(p,SP); AtkMid
	            i: passBackward{num_def_backpass++;} -> UpdatePos(p,BW); AtkKep
	        }
        } else {
        	pcase{
            	i: passForward -> UpdatePos(p,SP); AtkMid
           }
        }
	k: tackled{danger = 4;} -> Skip
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	j: pass -> UpdatePos(p, LP); AtkMid
	k: tackled{danger = 4;} -> Skip
};

Mid(i, j, k, l, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	i: pass -> 
		if(num_mid_backpass < 2) {
			pcase { 
	            i: passForward -> UpdatePos(p, SP); AtkFor
	            i: passBackward -> UpdatePos(p,SP); AtkDef
	        }
        } else {
        	pcase{
            	i: passForward -> UpdatePos(p, SP); AtkFor
           }
        }
	l: tackled{danger = 3;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	j: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	l: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	k: shoot -> UpdatePos(p, LS); DefKep
	l: tackled{danger = 3;} -> Skip
};

For(i, j, k, l, m, n, o, h, p) = [defKepPos[C] == 1]finish -> pcase {
	// pass to atk_mid
	i: shoot -> UpdatePos(p, FI); DefKep
 	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
 	}
} [] [defKepPos[C] == 1]longShot -> pcase {
	// pass to atk_mid
	j: shoot -> UpdatePos(p, LS); DefKep
	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
	 }
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	// pass to atk_mid
	k: shoot -> UpdatePos(p, VO); DefKep
	m: tackled -> pcase {
 		n: penalty -> pcase {
 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
 		}
 		100-n: {
 			danger = 2;
 		} -> Skip
	 }
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	// pass to atk_mid
	h: goodHeader -> pcase {
		l: shoot -> UpdatePos(p, HD); DefKep
		m: tackled -> pcase {
	 		n: penalty -> pcase {
	 			o: shoot{penaltyGoal = true;} -> UpdatePos(p, FI); DefKep
	 		}
	 		100-n: {
	 			danger = 2;
	 		} -> Skip
	 	}
	 }
	100-h: badHeader -> Skip
};

Kep_2(i, p) = attemptSave -> pcase {
	i: save{danger = 1;} -> Skip
	100-i: concede -> Skip
};


UpdatePos(p, e) = case {
	p == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			e == KVO: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 1; pos[R] = 0;} -> Skip //Keeper volley to midfielders
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	p == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#define PenaltyGoal penaltyGoal == true;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;
#assert AtkKep |= F G PenaltyGoal with prob;